#include <stdio.h>
#include <stdlib.h>

//Ponteiro para No de Lista
typedef struct NoLista *PtrNoLista;

//Estrutura de um nó
typedef struct NoLista {
  int x;
  PtrNoLista proximo;
} NoLista;

//Estrutura da Lista
typedef struct {
  PtrNoLista inicio;
  int tamanho;
} Lista;

// Parte 1 -- Versão PESADA
int maior(Lista* lista);
// Parte 2 --
int tamanhoLista(Lista* lista);
// Parte 3 --
int exclui_n(Lista* lista, int n);
// Parte 4
int removeListaPrimeiro(Lista* lista);
// Parte 5
void destroiLista(Lista* lista);
// Parte 6
void inverteLista(Lista* lista);
// Parte 7
Lista Lista_par(Lista* lista);

// Inicialização da lista
void iniciaLista(Lista* lista){
  lista->inicio = NULL;
  lista->tamanho = 0;
}
// Verificar se a lista está vazia
int verificaVazia(Lista* lista){
  if(lista->tamanho==0){
    return 1;
  }
  return 0;
}
// Verifica tamanho da lista
int tamanhoLista(Lista* lista){
  return lista->tamanho;
}
// Insere um elemento
void inserirLista(Lista* lista, int new){

  PtrNoLista new_no = (PtrNoLista)malloc(sizeof(NoLista));
  new_no->x=new;
  new_no->proximo=NULL;

  if(verificaVazia(lista)){
    lista->inicio = new_no;
  }else{
    PtrNoLista aux;
    for (aux = lista->inicio; aux->proximo != NULL; aux = aux->proximo){
    }
    aux->proximo = new_no;
  }
  lista->tamanho++;
}
// Remova um elemento especifico
int removeListaEspecifico(Lista* lista, int remove){
    if(verificaVazia(lista)){
    printf("A lista está vazia!\n");
    return 0;
  }else{
    PtrNoLista aux;
    for (aux = lista->inicio; aux->proximo != NULL && aux->proximo->x != remove; aux = aux->proximo){
    }
    if(aux->proximo->x == remove){
      PtrNoLista remover = aux->proximo;
      aux->proximo = remover->proximo;
      free(remover);
      lista->tamanho--;
      return 1;
    }else{
      printf("Número não está inserido na lista.\n");
      return 0;
    }
  }
}
// Remova o primeiro elemento
int removeListaPrimeiro(Lista* lista){
  if(verificaVazia(lista)){
    printf("A lista está vazia!\n");
    return 0;
  }else{
    PtrNoLista remover = lista->inicio;
    lista->inicio = lista->inicio->proximo;
    free(remover);
    lista->tamanho--;
    return 1;
  }
}
// Remova o ultimo elemento
int removeListaUltimo(Lista* lista){
  if(verificaVazia(lista)){
    printf("A lista está vazia!\n");
    return 0;
  }else if(tamanhoLista(lista) == 1){
    removeListaPrimeiro(lista);

  }else{
    PtrNoLista aux;
    for (aux = lista->inicio; aux->proximo->proximo != NULL; aux = aux->proximo){
    }
    PtrNoLista remover = aux->proximo;
    aux->proximo = remover->proximo;
    free(remover);
    lista->tamanho--;
    return 1;
  }
}
// Checa o final da lista
int finalLista(Lista* lista){
  if(verificaVazia(lista)){
    printf("A lista está vazia!\n");
    return -999;
  }else{
    PtrNoLista aux;
    for (aux = lista->inicio; aux->proximo != NULL; aux = aux->proximo){
    }
    return aux->x;
  }
}
// Checa o inicio da lista
int inicioLista(Lista* lista){
  if(verificaVazia(lista)){
    printf("A lista está vazia!\n");
    return -999;
  }else{
    return lista->inicio->x;
  }
}
// Zerar a Lista
void destroiLista(Lista* lista){
  while(!verificaVazia(lista)){
    removeListaUltimo(lista);
  }
}
// Imprime lista
void imprimeLista(Lista* lista){
  if(verificaVazia(lista)){
    printf("Lista = []\n");
  }else{
    printf("Lista: [");
    PtrNoLista aux;
    for (aux = lista->inicio; aux != NULL; aux = aux->proximo){
      if(aux->proximo == NULL){
        printf("%d",aux->x);
      }else{
        printf("%d,",aux->x);
      }
    }
    printf("]\n");
  }
}
// Busque o maior -- BUSCA LINEAR :p
int maior(Lista* lista){
  int maior = lista->inicio->x;
  if(verificaVazia(lista)){
    printf("Lista está Vazia\n");
    return -999;
  }else{
    PtrNoLista aux;
    for (aux = lista->inicio; aux != NULL; aux = aux->proximo){
      if(aux->x>maior){
        maior = aux->x;
      }
    }
  }
  return maior;
}
// Exclui o enésimo elemento
int exclui_n(Lista* lista, int n){
  if(verificaVazia(lista)){
    printf("A lista está vazia!\n");
    return 0;
  }else if(n>tamanhoLista(lista)){
    printf("Valor de N inválido!\n");
    return 0;
  }else if(n==1){
    removeListaPrimeiro(lista);
  }else if(n==tamanhoLista(lista)){
    removeListaUltimo(lista);
  }else{
    PtrNoLista aux;
    int i=1;
    for (aux = lista->inicio; aux->proximo != NULL && i!=n-1; aux = aux->proximo,i++){
    }
    PtrNoLista remover = aux->proximo;
    aux->proximo = remover->proximo;
    free(remover);
    lista->tamanho--;
    return 1;

  }
}
// Inverte a lista
void inverteLista(Lista* lista){
  if(tamanhoLista(lista)<=1){
    return;
  }else{
    PtrNoLista ptr;
    int i =0;
    int tam = tamanhoLista(lista);
    int* vetor = (int*)malloc(tam*sizeof(int));
    while(verificaVazia(lista)==0) {
      vetor[i] = finalLista(lista);
      removeListaUltimo(lista);
      i++;
    }
    for (int i = 0; i<tam ; i++) {
      inserirLista(lista,vetor[i]);
    }
    free(vetor);
  }
}
// Retorne uma lista somente de números pares
Lista Lista_par(Lista* lista){
  Lista lista_par;
  iniciaLista(&lista_par);
  PtrNoLista aux;
  for (aux = lista->inicio; aux != NULL; aux = aux->proximo){
    if(aux->x%2==0){
      inserirLista(&lista_par,aux->x);
    }
  }
  return lista_par;
}

int main(){

}
